#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>

char M[300][4], IR[4], GR[4];
bool C;
int PTR;

struct PCB {
    char job[4], TTL[4], TLL[4];
} pcb;

int VA, RA;
int TTC, LLC, TTL, TLL;
int EM;
int SI, TI, PI;
int ttl, tll;
FILE *fin, *fout;
char line[100];
int random[30];
int l = -1;
int IC;
int pte;
int check1 = 0;
int InValid = 0;

void initialization();
void load();
void pagetable();
void allocate();
void startExecution();
void executeProgram();
void addMap();
void examine();
void mos();
void terminate();
void readData();
void writeData();
void printMem();

void initialization() {
    SI = TI = PI = 0;
    TTC = LLC = TTL = TLL = 0;
    EM = VA = RA = IC = PTR = 0;
    InValid = 0;

    for (int i = 0; i < 30; i++) {
        random[i] = 0;
    }
    for (int i = 0; i < 4; i++) { 
        IR[i] = '&';
        GR[i] = '_';
    }
    for (int i = 0; i < 300; i++) { 
        for (int j = 0; j < 4; j++) {
            M[i][j] = '_';
        }
    }
}

void printMem() {
    for (int i = 0; i < 300; i++) {
        printf("M[%d]", i);
        for (int j = 0; j < 4; j++) {
            printf("%c", M[i][j]);
        }
        printf("\n");
    }
}

void load() {
    while (fgets(line, sizeof(line), fin) != NULL) {
        int i, j;
        
        if (line[0] == '$' && line[1] == 'A' && line[2] == 'M' && line[3] == 'J') {
            if (check1 > 0) {
                printMem(); // Reset system state
            }
            initialization();
            check1++;

            // Extract job parameters from line
            for (i = 4, j = 0; i < 8; i++, j++) {
                pcb.job[j] = line[i];
            }
            for (i = 8, j = 0; i < 12; i++, j++) {
                pcb.TTL[j] = line[i];
            }
            for (i = 12, j = 0; i < 16; i++, j++) {
                pcb.TLL[j] = line[i];
            }
            // Convert TTL and TLL to integer
            ttl = ((pcb.TTL[0] - '0') * 1000 + (pcb.TTL[1] - '0') * 100 +
                  (pcb.TTL[2] - '0') * 10 + (pcb.TTL[3] - '0'));
            tll = ((pcb.TLL[0] - '0') * 1000 + (pcb.TLL[1] - '0') * 100 +
                  (pcb.TLL[2] - '0') * 10 + (pcb.TLL[3] - '0'));

            pagetable();
            allocate();
        }
        if (line[0] == '$' && line[1] == 'D' && line[2] == 'T' && line[3] == 'A') {
            printf("\nNew Job Execution Started\n");
            startExecution();  
        }
        else if (line[0] == '$' && line[1] == 'E' && line[2] == 'N' && line[3] == 'D') {
            startExecution();
        }
        printf("End of Execution\n");
    }
    printf("No job left\n\n-----------End-----------\n");
}

void pagetable() {
    PTR = (rand() % 29) * 10;  
    random[PTR / 10] = 1;

    for (int i = PTR; i < PTR + 10; i++) {
        for (int j = 0; j < 4; j++) {
            M[i][j] = '*';
        }
    }
}

void allocate() {
    int level = 0;
    int check = 0;
    int i, j, pos = 0;
    int k = 0;
    char str[3];
    
    while (check != 1) {
        pos = (rand() % 29) * 10;
        while (random[pos / 10] != 0) {
            pos = (rand() % 29) * 10;
        }
        random[pos / 10] = 1;
        sprintf(str, "%d", pos);

        if (pos < 100) {
            M[PTR][2] = '0';
            M[PTR][3] = str[0];
        } else {
            M[PTR][2] = str[0];
            M[PTR][3] = str[1];
        }
        fgets(line, sizeof(line), fin);
        level++;
        k = 0;
        
        for (i = 0; i < strlen(line) / 4; i++) {
            for (j = 0; j < 4; j++) {
                M[pos + i][j] = line[k];
                k++;
                if (line[k] == 'H') {
                    check = 1;
                    M[pos + (i + 1)][0] = 'H';
                    M[pos + (i + 1)][1] = '0';
                    M[pos + (i + 1)][2] = '0';
                    M[pos + (i + 1)][3] = '0';
                } else {
                    continue;
                }
            }
        }
    }
}

void startExecution() {
    IC = 0;
    executeProgram();
}

void executeProgram() {
    int no;
    char v[3];
    int i, j, k;
    j = 0;

    v[0] = M[PTR][2];
    v[1] = M[PTR][3];
    v[2] = '\0';
    no = ((v[0] - '0') * 10) + (v[1] - '0');

    while (IR[0] != 'H') {
        for (int k = 0; k < 4; k++) {
            IR[k] = M[(no * 10) + IC][k];
        }
        if (!isdigit(IR[2]) || !isdigit(IR[3]) || isalpha(IR[2]) || isalpha(IR[3])) {
            PI = 2;
            if (TTC >= ttl)
                TI = 2;
            else
                TI = 0;
            mos();
        }

        VA = ((IR[2] - '0') * 10) + (IR[3] - '0');
        addMap();
        examine();
    }
}

void addMap() {
    int pos;
    char str[3];
    pte = PTR + (VA / 10);
    if (M[pte][3] == '*') {
        PI = 3;
        pos = (rand() % 29) * 10;
        while (random[pos / 10] != 0)
            pos = (rand() % 29) * 10;
        random[pos / 10] = 1;
        sprintf(str, "%d", pos);
        if (pos / 100 == 0) {
            M[pte][2] = '0';
            M[pte][3] = str[0];
        } else {
            M[pte][2] = str[0];
            M[pte][3] = str[1];
        }
    } else {
        PI = 0;
    }
    int p = (M[pte][2] - '0') * 10 + (M[pte][3] - '0');
    RA = (p * 10) + (VA % 10);
    if (RA > 300) {
        PI = 2;
        TI = 0;
        mos();
    }
}

void examine() {
    if (IR[0] == 'G') {
        IC = IC + 1;
        if (IR[1] == 'D') {
            SI = 1;
            TTC = TTC + 2;
            if (TTC < ttl)
                TI = 0;
            else
                TI = 2;
            mos();
        } else {
            PI = 1;
            if (TTC > ttl)
                TI = 2;
            TI = 0;
            mos();
        }
    } else if (IR[0] == 'P') {
        IC = IC + 1;
        if (IR[1] == 'D') {
            LLC = LLC + 1;
            TTC = TTC + 1;
            SI = 2;
            if (TTC < ttl) {
                TI = 0;
                if (PI == 3) {
                    InValid = 1;
                }
            } else {
                TI = 2;
            }
        } else {
            PI = 1;
            if (TTC >= ttl)
                TI = 2;
            else
                TI = 0;
        }
        mos();
    } else if (IR[0] == 'L') {
        IC = IC + 1;
        if (IR[1] == 'R') {
            if (PI == 3) {
                InValid = 1;
                TI = 0;
                mos();
            } else {
                for (int j = 0; j < 4; j++)
                    GR[j] = M[RA][j];
                TTC++;
            }
            if (TTC > ttl) {
                PI = 3;
                TI = 2;
                mos();
            }
        } else {
            PI = 1;
            if (TTC >= ttl)
                TI = 2;
            TI = 0;
            mos();
        }
    } else if (IR[0] == 'S') {
        IC = IC + 1;
        if (IR[1] == 'R') {
            for (int j = 0; j < 4; j++)
                M[RA][j] = GR[j];
            TTC = TTC + 2;

            if (TTC > ttl) {
                TI = 2;
                PI = 3;
                mos();
            }
        } else {
            PI = 1;
            if (TTC > ttl)
                TI = 2;
            TI = 0;
            mos();
        }
    } else if (IR[0] == 'C') {
        IC = IC + 1;
        if (IR[1] == 'R') {
            if (PI == 3) {
                InValid = 1;
                TI = 0;
                mos();
            } else {
                if (M[RA][1] == GR[1] && M[RA][2] == GR[2] && M[RA][3] == GR[3] && M[RA][0] == GR[0])
                    C = true;
                else
                    C = false;
                TTC++;
            }
            if (TTC > ttl) {
                TI = 2;
                PI = 3;
                mos();
            }
        } else {
            PI = 1;
            if (TTC > ttl)
                TI = 2;
            TI = 0;
            mos();
        }
    } else if (IR[0] == 'B') {
        IC = IC + 1;
        if (IR[1] == 'T') {
            if (PI == 3) {
                InValid = 1;
                TI = 0;
                mos();
            } else {
                if (C == true)
                    IC = VA;
                TTC++;
            }
            if (TTC > ttl) {
                TI = 2;
                PI = 3;
                mos();
            }
        } else {
            PI = 1;
            if (TTC > ttl)
                TI = 2;
            TI = 0;
            mos();
        }
    } else if (IR[0] == 'H') {
        IC = IC + 1;
        TTC++;
        if (TTC > ttl) {
            TI = 2;
            PI = 3;
            mos();
        } else {
            SI = 3;
            mos();
        }
    } else {
        PI = 1;
        if (TTC > ttl)
            TI = 2;
        TI = 0;
        mos();
    }
}

void mos() {
    if (PI == 1) {
        if (TI == 0) {
            EM = 4;
            fprintf(fout, "OpCode Error\n");
            terminate();
        } else if (TI == 2) {
            EM = 3;
            fprintf(fout, "Time Limit Exceeded\n");
            EM = 4;
            fprintf(fout, "Operation Code Error\n");
            terminate();
        }
    } else if (PI == 2) {
        if (TI == 0) {
            EM = 5;
            fprintf(fout, "Operand Error\n");
            terminate();
        } else if (TI == 2) {
            EM = 3;
            fprintf(fout, "Time Limit Exceeded\n");
            EM = 5;
            fprintf(fout, "Operand Error\n");
            terminate();
        }
    } else if (PI == 3) {
        if (TI == 0) {
            if (InValid == 1) {
                EM = 6;
                fprintf(fout, "Invalid Page Fault\n");
                terminate();
            }
        } else if (TI == 2) {
            EM = 3;
            fprintf(fout, "Time Limit Exceeded\n");
            terminate();
        }
    }
    if (SI == 1) {
        if (TI == 0)
            readData();
        else if (TI == 2) {
            EM = 3;
            fprintf(fout, "Time Limit Exceeded\n");
            terminate();
        }
    }
    if (SI == 2) {
        if (TI == 0)
            writeData();
        else if (TI == 2) {
            writeData();
            EM = 3;
            fprintf(fout, "Time Limit Exceeded\n");
            terminate();
        }
    }
    if (SI == 3) {
        EM = 0;
        fprintf(fout, "No Error\n");
        terminate();
    }
}

void terminate() {
    fprintf(fout, "Job ID : %c%c%c%c  TTL=%d  TLL=%d\n", pcb.job[0], pcb.job[1], pcb.job[2], pcb.job[3], ttl, tll);
    fprintf(fout, "PTR = %d IC = %d EM = %d IR = ", PTR, IC, EM);
    for (int i = 0; i < 4; i++) fprintf(fout, "%c", IR[i]);
    fprintf(fout, "\n");
    fprintf(fout, "SI = %d  TI = %d  PI = %d\n", SI, TI, PI);
    fprintf(fout, "TTC = %d  LLC = %d\n", TTC, LLC);
    fprintf(fout, "\n");
    fprintf(fout, "\n");

    load();
    exit(0);
}

void readData() {
    fgets(line, sizeof(line), fin);
    if (line[0] == '$' && line[1] == 'E' && line[2] == 'N' && line[3] == 'D') {
        EM = 1;
        fprintf(fout, "Out of Data\n");
        terminate();
    }
    int i, j, k;
    k = 0;
    for (i = 0; k <= strlen(line); i++) {
        for (j = 0; j < 4 && k <= strlen(line); j++) {
            M[RA + i][j] = line[k];
            k++;
        }
    }
}

void writeData() {
    char buff[40];
    int ra = 0, i, j, k;
    ra = RA;
    k = 0;
    if (LLC > tll) {
        EM = 2;
        fprintf(fout, "Line Limit Exceeded\n");
        terminate();
    }
    while (1) {
        for (i = 0; i < 4; i++) {
            if (M[ra][i] == '_')
                break;
            buff[k] = M[ra][i];
            k++;
        }
        if (M[ra][i] == '_')
            break;
        ra++;
    }
    buff[k] = '\0';
    fprintf(fout, "%s\n", buff);
}

int main() {
    fin = fopen("in2.txt", "r");
    fout = fopen("output2.txt", "a");
    load();
    fclose(fin);
    fclose(fout);
    return 0;
}


--------------------------
in2.txt
--------------------------
$AMJ000100200001
QD20PD20H
$DTA
100
$END0001
$AMJ000200170003
GD20GD30GD4oGD50PD20PD30LR20CR30BT11PD50HPD40H
$DTA
My
Name
Is Avanti
Not Nidhi
$END0003
$AMJ000300190004
GD20PD20GD30LR30SR20PD20GD40PD40GD50LR50SR20PD20H
$DTA
   Dog
   J
   in the
   F
$END0006
$AMJ000400200002
GD20GD30PD90PD40LR20SR40LR30SR20LR40SR30
PD20PD30H
$DTA
100
300
$END0002
$AMJ0005000350004
GD20LR20SR32SR33SR34SR35SR36SR37SR38PD30
GD10LR10SR41SR49PD40PD40PD40PD40PD40PD30
SR54SR55SR56PD50LR20SR64SR65SR66PD60H
$DTA
___
|
$END0004
$AMJ000600190004
GD20PD20LR20SR30SR31PD30SR40SR41SR42PD40PD30PD20H
$DTA
^
$END0004
$AMJ000700260004
GD20GD30PD20LR20SR30SR31SR40SR41SR42SR50SR51SR52SR53PD30PD40PD50H
$DTA
100
$END0003
